os: linux
dist: xenial

language: php

php:
  - 7.3

services:
  - docker

stages:
  - name: script
    if: branch in (master, development)
  - name: deploy
    if: branch in (master, development)

before_install:
  # Stop travis mysql as we're using MySQL in an image
  - sudo service mysql stop
  # Print Docker version for debugging purposes
  - docker --version
     
# Setup containers, run tests, clean up, install production dependencies and push Docker image
script:
  # Prepare for deployment of Docker image
  - pip install --user awscli # install aws cli w/o sudo
  - export PATH=$PATH:$HOME/.local/bin # put aws in the path
  - aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 282251075226.dkr.ecr.eu-west-1.amazonaws.com #needs AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY envvars
  
  # Run tests
  - docker-compose -f docker-compose-ci-apacs-tests.yml up -d
  - sleep 30
  - docker-compose -f docker-compose-ci-apacs-tests.yml exec apacs /code/vendor/bin/phpunit

  # Add tag in Dockerrun.aws.json
  - sed -i "s/{image-tag}/${IMAGE_TAG}/g" Dockerrun.aws.json

  # build and push APACS image
  - docker build -f ./infrastructure/php-fpm-phalcon/Dockerfile_prod -t apacs .
  - docker tag apacs 282251075226.dkr.ecr.eu-west-1.amazonaws.com/apacs:${IMAGE_TAG}
  - docker push 282251075226.dkr.ecr.eu-west-1.amazonaws.com/apacs:${IMAGE_TAG}

  # Create docker-compose.yml only if the resolutions branch
  # that deploys to a single-container environment is active.
  - |
    if [ "${TRAVIS_BRANCH}" = "resolutions" ]; then
      rm Dockerrun.aws.json
      sed "s/{image-tag}/${IMAGE_TAG}/g" docker-compose-apacs-beta.yml > docker-compose.yml
    fi


deploy:
  - provider: elasticbeanstalk
    access_key_id: ${AWS_ACCESS_KEY_ID}
    secret_access_key: ${AWS_SECRET_ACCESS_KEY}
    region: eu-west-1
    app: APACS
    env: apacs-dev-jens2
    bucket: elasticbeanstalk-eu-west-1-282251075226
    edge: true
    on:
      branch: "resolutions"

  - provider: elasticbeanstalk
    access_key_id: ${AWS_ACCESS_KEY_ID}
    secret_access_key: ${AWS_SECRET_ACCESS_KEY}
    region: eu-west-1
    app: APACS
    env: apacs-test-auth0-2
    bucket: elasticbeanstalk-eu-west-1-282251075226
    edge: true
    on:
      all_branches: true
      condition: $TRAVIS_BRANCH =~ ^(development)$

  - provider: elasticbeanstalk
    access_key_id: ${AWS_ACCESS_KEY_ID}
    secret_access_key: ${AWS_SECRET_ACCESS_KEY}
    region: eu-west-1
    app: APACS
    env: apacs-production
    bucket: elasticbeanstalk-eu-west-1-282251075226
    edge: true
    on:
      all_branches: true
      condition: $TRAVIS_BRANCH =~ ^(master)$      
